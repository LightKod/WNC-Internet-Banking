import { 
    verifyRequestHash, 
    generateRequestHash, 
    generateRSASignature, 
    verifyRSASignature, 
    generatePGPSignature, 
    verifyPGPSignature 
} from './security.js'; // Đổi tên file module của bạn

const test = async () => {
    // Input test data
    const data = {
        bank_code: '123',
        account_number: '456789',
        amount: 1000,
        timestamp: '2024-12-14T10:00:00Z'
    };

    const secretKey = 'your-shared-secret-key';
    const privateRSAKey = `-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQBeOb+nUatXNPH9jBaNaPXAk9GJGb2rEQF0GCdj/WLW9+CzyWgB
QCZWUBZqQGInyC7jam5Ci5u0qwkBUqecN/gXfGHatOxWNYz/7TYN6FArVf0YGCVm
x45vhzAS/WhkpsghodCgLVto3nM1UWtzH6cqviK9IghpBMKsje0xudL5yeI11YC8
zXmO8+WXQDb9Dm/nWONKX84H1jebkICy3IGnYhQK133c28+65XdWkELgQeLVtA9C
9H1nbaG0GSZzzC+BsDmPFF+PgZxom1PX5JmS4nVf8ZvVoZM9qyCdjLqGLuSVSXuo
dGNMoRRQxJBHVqeqzcjWz6bjR//drIB/4l3RAgMBAAECggEAThjRN+4h9Irmk377
5kL7hZ0/C8JxCQt0R/QJGgAXXxNeg8VIVdkErX99xJ0OfeiWrFk3gCJUcN9d/GG0
mG9vSpAGTw6r4BxMfIbwyYAminSf7Mt+nHyEGv5SozqzvtDZib6ju088t2PA241b
YLT4ih3Djz1Y+So/7GNKGG/rZKqlNruk20HjjOP06EIRgT6Ey2Q8kVsIgBK+1X4D
8X6yPQ8bKh1KP2hlIq8rIkCNmIqhlVKe4OX8pofY91DBU5aP8GDq2VNsoDHuYDp4
Bo6NN8ro8/zvvGqo+EmZUHdYc+FkgrZ20pLN3y+Q44Zw2G+c6vi017YbOFZjwEGs
Ks8/wQKBgQCemvAfstB/DW1PSBob0rPd1kNa7IExs7WvEOx6r1iohlg8QQFgyHR0
q4XgpLmdMOkcrk1sCOaZsm8IVRqcNuPOPAhToGj/V5C8Bpy45xVcDIOK9dXeVidP
jm8IJi9pAqgvO/VFl08XGQxcyPdJQMw6H2X9GTxQJXR3y6fE/K5IiQKBgQCYFjNF
ZfiXe/i3NrBjb7CauFSksDvtP6THG+D8zWTPbSU7tdUrV6T0mLXoAR2Zwsgdnu7o
/7Hu+lLantKJjsHXEQviz6vhX2PV579UIkmcoSwj3X6rhXOhq14T1BZ0pIWeLNRy
WXi7lNzPTn8Em3O6mjhJNv1QPFFRgsSVTE0JCQKBgDHyu1JQPub0NIt2OnqupWRk
WLvmpV0gqkPiwYZ1eCdCf8Eh+6weFMa1SakQV0AQqikVH165gt2+Wsc1/fZaNu24
7Cph5w8a5YLBVlPIumpNqpN1jg/B9AlS4tafJ+kbJBoT+M8cspSkl8cUpwPTuz1G
rBjD/MGEuiQL597acIx5AoGBAI7oBWNHbvCAt/MIO3QkBfFMFZTuWFEVBXNmWeGR
6hESgPL7aAOjBkgjmoIXUkYiBcH3jox3fy2MIAB3TmOdNb0tslp8QwixhnD/owOe
eEbqFzzYKudmrYGTMgI1vqf50+gOPc35Dn5MYbOWEbo1i+gic5MwTZRwKQULeEbF
fHlpAoGAf46AM3HS1ds1t3597Yfa2wfNVihIFd8fQhUQf8iNefoF04DZ8fCHRLvs
kfV5Lj7qoTW0zr3mTOOvZUpn6rgRak7vf66jBOxr7S9VLvf358lYq5wSatwebVYS
ppW9ZRn7Bt2bW0H4zPR5vO59hXKi2BMzL868HK0xI0naCtTw004=
-----END RSA PRIVATE KEY-----`;
    const publicRSAKey = `-----BEGIN PUBLIC KEY-----
MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBeOb+nUatXNPH9jBaNaPXA
k9GJGb2rEQF0GCdj/WLW9+CzyWgBQCZWUBZqQGInyC7jam5Ci5u0qwkBUqecN/gX
fGHatOxWNYz/7TYN6FArVf0YGCVmx45vhzAS/WhkpsghodCgLVto3nM1UWtzH6cq
viK9IghpBMKsje0xudL5yeI11YC8zXmO8+WXQDb9Dm/nWONKX84H1jebkICy3IGn
YhQK133c28+65XdWkELgQeLVtA9C9H1nbaG0GSZzzC+BsDmPFF+PgZxom1PX5JmS
4nVf8ZvVoZM9qyCdjLqGLuSVSXuodGNMoRRQxJBHVqeqzcjWz6bjR//drIB/4l3R
AgMBAAE=
-----END PUBLIC KEY-----`;

    const privatePGPKeyArmored = `-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: Keybase OpenPGP v1.0.0
Comment: https://keybase.io/crypto

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
=Hq2j
-----END PGP PRIVATE KEY BLOCK-----`;
    const publicPGPKeyArmored = `-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: Keybase OpenPGP v1.0.0
Comment: https://keybase.io/crypto

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
DUbs58e1qQsL/O4fAMMWTcNjjuF1
=hAZT
-----END PGP PUBLIC KEY BLOCK-----`;

    // Shared secret hash testing
    console.log('--- Shared Secret Hash ---');
    const providedHash = generateRequestHash(data, secretKey);
    console.log('Generated Hash:', providedHash);

    const isHashValid = verifyRequestHash(data, secretKey, providedHash);
    console.log('Hash Verified:', isHashValid);

    // RSA signature testing
    console.log('\n--- RSA Signature ---');
    const rsaSignature = generateRSASignature(data, privateRSAKey);
    console.log('Generated RSA Signature:', rsaSignature);

    const isRSASignatureValid = verifyRSASignature(data, publicRSAKey, rsaSignature);
    console.log('RSA Signature Verified:', isRSASignatureValid);

    // PGP signature testing
    console.log('\n--- PGP Signature ---');
    const pgpSignature = await generatePGPSignature(data, privatePGPKeyArmored);
    console.log('Generated PGP Signature:', pgpSignature);

    const isPGPSignatureValid = await verifyPGPSignature(data, publicPGPKeyArmored, pgpSignature);
    console.log('PGP Signature Verified:', isPGPSignatureValid);
 
};

// Run the test
test().catch(err => console.error('Error during test:', err));

